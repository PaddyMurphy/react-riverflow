{"version":3,"sources":["components/Navbar/Navbar.js","components/Graph/Graph.js","components/Gridtable/Gridrow.js","components/Gridtable/Gridtable.js","components/Riverflow/Riverflow.js","components/Footer/Footer.js","App.js","index.js","registerServiceWorker.js"],"names":["Navbar","react_default","a","createElement","className","Component","Graph","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","loading","url","undefined","selected","displayGraph","elClasses","Classnames","has-error","loadingClasses","is-hidden","src","alt","vm","graphBaseUrl","graphType","setState","newImage","Image","onload","e","onerror","Gridrow","selectRiver","bind","assertThisInitialized","sortBy","sortKey","key","_this2","sortOrders","target","currentTarget","classList","contains","dataset","data","tableData","endDate","Date","toISOString","split","trClasses","level","is-selected","site","detailClasses","show-row","svgArrowClasses","arrow-up","rising","arrow-down","is-rising-fast","risingFast","onClick","data-selected","name","cfs","viewBox","xlinkHref","class","date","time","colSpan","href","location","condition","components_Graph_Graph","startDate","Gridtable","sortOrder","sortField","handleSort","sort","that","_this$state","rows","query","searchQuery","toLowerCase","tableClasses","invisible","sortNameClasses","active","asc","desc","sortCfsClasses","slice","b","forEach","row","indexOf","push","components_Gridtable_Gridrow","version","id","points","data-sort","title","rivers","Rivers","riversFormatted","Riverflow","handleRefreshTable","preventDefault","getUsgsData","handleFilterTable","value","clearSearch","sites","formatSites","nextProps","nextState","length","parentElement","add","refreshClasses","is-loading","errorClasses","hideNotification","aria-label","htmlFor","autoComplete","onChange","type","placeholder","components_Gridtable_Gridtable","list","d","match","join","Axios","get","params","parameterCd","format","period","siteStatus","then","response","timeSeries","displayUsgsData","catch","console","log","message","arr","currentValue","geo","oldestValue","newestValue","percentChanged","today","river","i","values","parseInt","dateTime","toLocaleTimeString","hour","minute","hour12","Math","round","toDateString","sourceInfo","geoLocation","geogLocation","siteCode","siteName","latitude","longitude","oldCfs","getConditions","mergeRiverInfo","Conditions","flow0","flow1","flow2","flow3","flow4","flow5","flow6","Footer","aria-hidden","height","width","fillRule","App","components_Navbar_Navbar","components_Riverflow_Riverflow","components_Footer_Footer","ReactDOM","render","src_App_0","document","getElementById","navigator","window","addEventListener","swUrl","concat","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller"],"mappings":"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","file":"static/js/main.eb8ca4c3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Navbar.sass';\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <div className=\"Navbar\">\n        <header className=\"hero is-bold is-primary\">\n          <div className=\"container\">\n            <div className=\"header is-flex\">\n              <h1 className=\"title\">Riverflow</h1>\n              <p className=\"tagline\">Texas Edition</p>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Classnames from 'classnames';\nimport './Graph.sass';\n\nclass Graph extends Component {\n  static propTypes = {\n    selected: PropTypes.string,\n    graphType: PropTypes.string,\n    period: PropTypes.number,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: false,\n      loading: false,\n      url: undefined,\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    if (props.selected) {\n      this.displayGraph(props.selected);\n    }\n  }\n\n  render() {\n    let elClasses = Classnames('graph-wrapper', {\n      'has-error': this.state.error ? true : false,\n    });\n\n    let loadingClasses = Classnames('graph-loading', {\n      'is-hidden': this.state.loading ? false : true,\n    });\n\n    return (\n      <div className={elClasses}>\n        <div className={loadingClasses}>Loading graph...</div>\n\n        <div className=\"graph-image\">\n          {this.state.url && (\n            <img\n              src={this.state.url}\n              className=\"graph\"\n              alt=\"USGS Water-data graph\"\n            />\n          )}\n\n          {this.state.error && <h2>Error loading the graph.</h2>}\n        </div>\n      </div>\n    );\n  }\n\n  displayGraph(selected) {\n    // display a graph of the flow\n    // TODO: catch error for undefined params\n    //       effects: Pecas at Pecos river 08419000\n    //       parm_cd=00060 (cfs) or 00065 (guage height ft)\n    const vm = this;\n    const graphBaseUrl =\n      '//waterdata.usgs.gov/nwisweb/graph?agency_cd=USGS&period=7';\n    // NOTE: usgs documentation is incorrect 'startDt' is 'begin_date'\n    let url =\n      graphBaseUrl + '&parm_cd=' + vm.props.graphType + '&site_no=' + selected;\n\n    // reset the graph and show / hide loading\n    vm.setState({ loading: true });\n\n    let newImage = new Image();\n    newImage.src = url;\n    newImage.onload = function(e) {\n      vm.setState({\n        loading: false,\n        url: url,\n      });\n    };\n    newImage.onerror = function(e) {\n      vm.setState({\n        error: true,\n        loading: false,\n        url: undefined,\n      });\n    };\n  }\n}\n\nexport default Graph;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Classnames from 'classnames';\nimport Graph from '../Graph/Graph';\nimport './Gridrow.css';\n\nclass Gridrow extends Component {\n\tstatic propTypes = {\n\t\ttableData: PropTypes.object.isRequired,\n\t\tgraphType: PropTypes.string.isRequired,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.selectRiver = this.selectRiver.bind(this);\n\t\tthis.sortBy = this.sortBy.bind(this);\n\n\t\tthis.state = {\n\t\t\tselected: undefined,\n\t\t\tsortKey: 'name',\n\t\t};\n\t}\n\n\tsortBy(key) {\n\t\tthis.setState({ sortKey: key }, () => {\n\t\t\tthis.sortOrders[key] = this.sortOrders[key] * -1;\n\t\t});\n\t}\n\n\t// binds this\n\tselectRiver(e) {\n\t\tconst target = e.currentTarget;\n\n\t\t// deselect if clicking the active row\n\t\tif (target.classList.contains('is-selected')) {\n\t\t\tthis.setState({ selected: undefined });\n\t\t} else {\n\t\t\t// set selected\n\t\t\tthis.setState({ selected: target.dataset.selected });\n\t\t}\n\t}\n\n\trender() {\n\t\tconst data = this.props.tableData;\n\t\tconst endDate = new Date().toISOString().split('T')[0];\n\t\tlet startDate = undefined;\n\n\t\tlet trClasses = Classnames(data.level, {\n\t\t\t'is-selected': this.state.selected === data.site ? true : false,\n\t\t});\n\n\t\tlet detailClasses = Classnames('row-details', {\n\t\t\t'show-row': this.state.selected === data.site ? true : false,\n\t\t});\n\n\t\tlet svgArrowClasses = Classnames({\n\t\t\t'arrow-up': data.rising,\n\t\t\t'arrow-down': !data.rising,\n\t\t\t'is-rising-fast': data.risingFast,\n\t\t});\n\n\t\treturn (\n\t\t\t<tbody>\n\t\t\t\t<tr\n\t\t\t\t\tclassName={trClasses}\n\t\t\t\t\tonClick={this.selectRiver}\n\t\t\t\t\tdata-selected={data.site}\n\t\t\t\t>\n\t\t\t\t\t<th>{data.name}</th>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span className=\"cfs-value\">{data.cfs}</span>\n\t\t\t\t\t\t<svg viewBox=\"0 0 27 30\" className={svgArrowClasses}>\n\t\t\t\t\t\t\t<use xlinkHref=\"#arrow-flow\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td className=\"wwclass\">{data.class}</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<span className=\"date\">{data.date}</span>\n\t\t\t\t\t\t<span className=\"time\">{data.time}</span>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\n\t\t\t\t<tr className={detailClasses}>\n\t\t\t\t\t<td colSpan=\"5\">\n\t\t\t\t\t\t<div className=\"row-details-wrapper columns\">\n\t\t\t\t\t\t\t<div className=\"column column-condition is-one-quarter\">\n\t\t\t\t\t\t\t\t<div className=\"content\">\n\t\t\t\t\t\t\t\t\t<p className=\"sitecode\">\n\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"button site-link\"\n\t\t\t\t\t\t\t\t\t\t\thref={data.location}\n\t\t\t\t\t\t\t\t\t\t\ttarget=\"blank\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tUSGS site {data.site} location\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p>{data.condition}</p>\n\t\t\t\t\t\t\t\t\t<p className=\"small\">\n\t\t\t\t\t\t\t\t\t\tNOTE: The rising / falling arrows\n\t\t\t\t\t\t\t\t\t\tcompare the current value to the value\n\t\t\t\t\t\t\t\t\t\t12 hours ago. The river may already be\n\t\t\t\t\t\t\t\t\t\ton the way down\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"column column-graph is-three-quarters\">\n\t\t\t\t\t\t\t\t<Graph\n\t\t\t\t\t\t\t\t\tendDate={endDate}\n\t\t\t\t\t\t\t\t\tstartDate={startDate}\n\t\t\t\t\t\t\t\t\tselected={this.state.selected}\n\t\t\t\t\t\t\t\t\tgraphType={this.props.graphType}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t);\n\t}\n}\n\nexport default Gridrow;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Classnames from 'classnames';\nimport Gridrow from './Gridrow';\nimport './Gridtable.sass';\n\nclass Gridtable extends Component {\n\tstatic propTypes = {\n\t\terror: PropTypes.bool,\n\t\tgraphType: PropTypes.string,\n\t\tloading: PropTypes.bool,\n\t\ttableData: PropTypes.array,\n\t\tsearchQuery: PropTypes.string,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tsortOrder: 1,\n\t\t\tsortField: 'name',\n\t\t};\n\t}\n\n\tcomponentWillMount() {\n\t\tthis.handleSort = e => {\n\t\t\tthis.setState({\n\t\t\t\tsortField: e.target.dataset.sort,\n\t\t\t\tsortOrder: this.state.sortOrder === 1 ? -1 : 1,\n\t\t\t});\n\t\t};\n\t}\n\n\trender() {\n\t\tconst that = this;\n\t\tconst { sortField, sortOrder } = this.state;\n\t\tlet rows = [];\n\t\tlet data = this.props.tableData;\n\t\tlet query = this.props.searchQuery.toLowerCase();\n\t\tlet name;\n\n\t\tlet loadingClasses = Classnames('loading notification is-warning', {\n\t\t\t'is-hidden': this.props.loading ? false : true,\n\t\t});\n\n\t\tlet tableClasses = Classnames('table', {\n\t\t\tinvisible: this.props.loading ? true : false,\n\t\t});\n\n\t\tlet sortNameClasses = Classnames({\n\t\t\tactive: sortField === 'name',\n\t\t\tasc: sortOrder === -1,\n\t\t\tdesc: sortOrder === 1,\n\t\t});\n\n\t\tlet sortCfsClasses = Classnames({\n\t\t\tactive: sortField === 'cfs',\n\t\t\tasc: sortOrder === -1,\n\t\t\tdesc: sortOrder === 1,\n\t\t});\n\n\t\t// sort first\n\t\tif (sortField === 'cfs') {\n\t\t\t// sort by number\n\t\t\tdata = data.slice().sort(function(a, b) {\n\t\t\t\ta = a[sortField];\n\t\t\t\tb = b[sortField];\n\t\t\t\treturn (a - b) * that.state.sortOrder;\n\t\t\t});\n\t\t} else {\n\t\t\t// sort by string\n\t\t\tdata = data.slice().sort(function(a, b) {\n\t\t\t\ta = a[sortField];\n\t\t\t\tb = b[sortField];\n\t\t\t\treturn (a === b ? 0 : a > b ? 1 : -1) * sortOrder;\n\t\t\t});\n\t\t}\n\n\t\t// construct the table rows\n\t\tdata.forEach(row => {\n\t\t\tname = row.name.toLowerCase();\n\n\t\t\tif (name.indexOf(query) === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trows.push(\n\t\t\t\t<Gridrow\n\t\t\t\t\tkey={row.site}\n\t\t\t\t\ttableData={row}\n\t\t\t\t\tgraphType={that.props.graphType}\n\t\t\t\t/>,\n\t\t\t);\n\t\t});\n\n\t\treturn (\n\t\t\t<div className=\"gridtable\">\n\t\t\t\t<svg className=\"is-hidden\">\n\t\t\t\t\t<symbol viewBox=\"0 0 27 30\" version=\"1.1\">\n\t\t\t\t\t\t<g id=\"arrow-flow\">\n\t\t\t\t\t\t\t<polygon points=\"21.6 29.4545455 5.4 29.4545455 5.4 16.2 0 16.2 13.5 0 27 16.2 21.6 16.2\" />\n\t\t\t\t\t\t</g>\n\t\t\t\t\t</symbol>\n\t\t\t\t</svg>\n\n\t\t\t\t<div className={loadingClasses}>\n\t\t\t\t\tLoading river information...\n\t\t\t\t</div>\n\n\t\t\t\t<table className={tableClasses}>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th className=\"th-name\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tdata-sort=\"name\"\n\t\t\t\t\t\t\t\t\tclassName={sortNameClasses}\n\t\t\t\t\t\t\t\t\tonClick={this.handleSort}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tName\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th className=\"th-cfs\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tdata-sort=\"cfs\"\n\t\t\t\t\t\t\t\t\tclassName={sortCfsClasses}\n\t\t\t\t\t\t\t\t\tonClick={this.handleSort}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tCfs\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th className=\"th-class\">Class</th>\n\t\t\t\t\t\t\t<th className=\"th-time\">Time</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tfoot>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>River Name</th>\n\t\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t\t<abbr title=\"cubic feet per second\">CFS</abbr>\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th className=\"th-class\">Class</th>\n\t\t\t\t\t\t\t<th className=\"th-time\">Time</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tfoot>\n\n\t\t\t\t\t{rows}\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Gridtable;\n","import React, { Component } from 'react';\nimport Axios from 'axios';\nimport Classnames from 'classnames';\nimport Gridtable from '../../components/Gridtable/Gridtable';\nimport Rivers from '../../rivers.json';\nimport Conditions from '../../conditions.json';\nimport './Riverflow.sass';\n\nconst baseMapUrl = '//maps.google.com/?q=';\nconst baseUsgsUrl = 'https://waterservices.usgs.gov/nwis/iv/';\nconst rivers = Rivers.data;\nlet riversFormatted = [];\n\nclass Riverflow extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: false,\n      graphType: '00060', // defaults to cfs\n      loading: true,\n      searchQuery: '',\n      tableData: [],\n    };\n\n    this.sites = this.formatSites();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.tableData.length) {\n      return true;\n    }\n    return false;\n  }\n\n  componentDidMount() {\n    // load the river data\n    this.getUsgsData();\n  }\n\n  // handle events\n\n  // bind this\n  handleRefreshTable = e => {\n    e.preventDefault();\n    this.getUsgsData();\n  };\n\n  handleFilterTable = e => {\n    this.setState({\n      searchQuery: e.target.value,\n    });\n  };\n\n  hideNotification(e) {\n    e.preventDefault();\n    e.currentTarget.parentElement.classList.add('is-hidden');\n  }\n\n  clearSearch = e => {\n    this.setState({\n      searchQuery: '',\n    });\n  };\n\n  render() {\n    let refreshClasses = Classnames('button is-primary', {\n      'is-loading': this.state.loading,\n    });\n\n    let errorClasses = Classnames('notification is-danger', {\n      'is-hidden': this.state.error === false,\n    });\n\n    return (\n      <div className=\"rivertable\">\n        <section className=\"section\">\n          <div className=\"container\">\n            <div className=\"Riverflow\">\n              <div className={errorClasses}>\n                <button\n                  className=\"delete\"\n                  onClick={this.hideNotification}\n                  aria-label=\"close error message\"\n                >\n                  {' '}\n                </button>\n                {this.state.error}\n              </div>\n\n              <div className=\"notification content\">\n                <button\n                  aria-label=\"Close the notification\"\n                  className=\"delete is-small\"\n                  onClick={this.hideNotification}\n                >\n                  {' '}\n                </button>\n                <p>\n                  Riverflow provides the latest{' '}\n                  <abbr title=\"cubic feet per second\">CFS</abbr> from the USGS\n                  gauges of floatable rivers and creeks. The color indicates\n                  optimal floating conditions with additional inforamtion and a\n                  7 day graph in the details.\n                </p>\n              </div>\n\n              <div className=\"columns is-flex tools\">\n                <div className=\"column column-search\">\n                  <div className=\"field level-item\">\n                    <label htmlFor=\"search\" className=\"label\">\n                      Search\n                    </label>\n                    <p className=\"control\">\n                      <input\n                        autoComplete=\"off\"\n                        onChange={this.handleFilterTable}\n                        value={this.state.searchQuery}\n                        id=\"search\"\n                        name=\"search\"\n                        className=\"input\"\n                        type=\"text\"\n                        placeholder=\"Filter the table\"\n                      />\n                      <button\n                        className=\"delete is-small\"\n                        onClick={this.clearSearch}\n                        aria-label=\"clear the search\"\n                      >\n                        {' '}\n                      </button>\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"column column-button\">\n                  <button\n                    className={refreshClasses}\n                    onClick={this.handleRefreshTable}\n                    aria-label=\"Refresh the table data\"\n                  >\n                    <span className=\"refresh-long is-hidden-mobile\">\n                      refresh river table\n                    </span>\n                    <span className=\"refresh-short is-hidden-tablet\">\n                      &#8634;\n                    </span>\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            <Gridtable\n              loading={this.state.loading}\n              tableData={this.state.tableData}\n              graphType={this.state.graphType}\n              searchQuery={this.state.searchQuery}\n            />\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n  // methods\n\n  formatSites() {\n    let list = [];\n\n    rivers.forEach(function(d) {\n      // return only number values\n      if (d.value.match(/\\d+/g)) {\n        list.push(d.value);\n      }\n    });\n\n    return list.join();\n  }\n\n  /**\n   * Fetches usgs instant data from rivers.json.\n   * @return {number[]} response\n   */\n  getUsgsData() {\n    riversFormatted = [];\n    this.setState({ loading: true });\n    // fetch all site numbers in rivers.json\n    Axios.get(baseUsgsUrl, {\n      params: {\n        parameterCd: this.state.graphType,\n        sites: this.sites,\n        format: 'json',\n        period: 'PT12H', // past 12 hours\n        siteStatus: 'active',\n      },\n    })\n      .then(response => {\n        this.setState({ loading: false });\n        if (response.data.value.timeSeries) {\n          this.displayUsgsData(response.data.value.timeSeries);\n          this.setState({ error: false });\n        } else {\n          this.setState({ error: 'no river data available' });\n        }\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({ loading: false });\n        this.setState({ error: error.message });\n      });\n  }\n\n  /**\n   * Formats usgs response for display from rivers.json.\n   * @return {number[]} formatted response\n   * @param {number[]} response - usgs fetch response.\n   */\n  displayUsgsData(response) {\n    const vm = this;\n    const today = new Date();\n    let arr;\n    let river = {};\n    let currentValue;\n    let date;\n    let geo;\n    let oldestValue;\n    let newestValue;\n    let percentChanged;\n    let rising;\n    let risingFast;\n    let risingFastThreshold = 130; // percent change\n    let site;\n    let time;\n\n    response.forEach(function(d, i, a) {\n      // NOTE: some rivers do not support cfs (00060)\n      arr = d.values[0].value;\n      // return on error\n      if (!arr[0]) return;\n\n      // oldestValue is the first item\n      oldestValue = parseInt(arr[0].value, 10);\n      // currentValue is the last item\n      currentValue = arr[arr.length - 1];\n      newestValue = parseInt(currentValue.value, 10);\n      // get current date / time\n      date = new Date(currentValue.dateTime);\n      time = date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false,\n      });\n\n      percentChanged = Math.round((newestValue / oldestValue) * 100);\n\n      // only show date if not today\n      if (today.toDateString() === date.toDateString()) {\n        date = '';\n      }\n\n      geo = d.sourceInfo.geoLocation.geogLocation;\n      site = d.sourceInfo.siteCode[0].value;\n      rising = newestValue > oldestValue;\n      risingFast = percentChanged > risingFastThreshold;\n\n      river = {\n        name: d.sourceInfo.siteName,\n        location: baseMapUrl + geo.latitude + ',+' + geo.longitude,\n        site: site,\n        date: date,\n        time: time,\n        cfs: newestValue,\n        oldCfs: oldestValue,\n        condition: vm.getConditions(newestValue).condition,\n        level: vm.getConditions(newestValue).level,\n        rising: rising,\n        risingFast: risingFast,\n      };\n      // merge additional river data\n      vm.mergeRiverInfo(river);\n    });\n\n    vm.setState({ tableData: riversFormatted });\n  }\n  /**\n   * Merges class from rivers.json to matching response\n   * matches are based on USGS site numbers\n   * @param {Object} river\n   */\n  mergeRiverInfo(river) {\n    rivers.forEach(function(d) {\n      // add white water class\n      if (d.value === river.site) {\n        river.class = d.class;\n      }\n    });\n\n    riversFormatted.push(river);\n  }\n\n  /**\n   * Returns condition description and level color code from conditions.json\n   * @return {Object} condition and level\n   * @param {number} cfs - from usgs fetch response.\n   */\n  getConditions(cfs) {\n    let condition;\n    let level;\n    // convert to number\n    cfs = parseInt(cfs, 10);\n    // check the range of the cfs and display the appropriate message\n    if (cfs === 0) {\n      condition = Conditions.flow0;\n      level = 'level-0';\n    } else if (cfs > 0 && cfs < 50) {\n      condition = Conditions.flow1;\n      level = 'level-1';\n    } else if (cfs >= 50 && cfs < 100) {\n      condition = Conditions.flow2;\n      level = 'level-2';\n    } else if (cfs >= 100 && cfs < 300) {\n      condition = Conditions.flow3;\n      level = 'level-3';\n    } else if (cfs >= 300 && cfs < 600) {\n      condition = Conditions.flow4;\n      level = 'level-4';\n    } else if (cfs >= 600 && cfs < 2000) {\n      condition = Conditions.flow5;\n      level = 'level-5';\n    } else if (cfs >= 2000) {\n      condition = Conditions.flow6;\n      level = 'level-6';\n    }\n\n    return { condition: condition, level: level };\n  }\n}\n\nexport default Riverflow;\n","import React, { Component } from 'react';\nimport './Footer.sass';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer className=\"footer\">\n        <div className=\"container\">\n          <div className=\"content has-text-centered\">\n            <p>\n              <strong>Riverflow</strong> by{' '}\n              <a href=\"//www.mountaindrawn.com\">Mountaindrawn</a>. The source\n              code is licensed\n              <a href=\"http://opensource.org/licenses/mit-license.php\"> MIT</a>.\n            </p>\n            <p>Built with React</p>\n            <p>\n              <a\n                className=\"icon\"\n                href=\"https://github.com/PaddyMurphy/react-riverflow\"\n              >\n                <b className=\"show-accessible\">view on github</b>\n                <svg\n                  aria-hidden=\"true\"\n                  className=\"octicon octicon-mark-github\"\n                  height=\"24\"\n                  version=\"1.1\"\n                  viewBox=\"0 0 16 16\"\n                  width=\"24\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"\n                  />\n                </svg>\n              </a>\n            </p>\n          </div>\n        </div>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport Riverflow from './components/Riverflow/Riverflow';\nimport Footer from './components/Footer/Footer';\n//import GoogleMaps from './components/Map';\nimport './App.sass';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Navbar />\n\n\t\t\t\t{/* <GoogleMaps /> */}\n\n\t\t\t\t<Riverflow />\n\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.sass';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}